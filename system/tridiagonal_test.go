package system

import (
	"math/rand"
	"testing"

	"github.com/ready-steady/assert"
)

func TestComputeTridiagonal1D(t *testing.T) {
	a := []float64{
		4.8075817741978699e-01, 1.2692671000342037e-01, 4.9831340044932859e-01,
		3.9611537773884853e-01, 8.4803219799756557e-01, 3.8361564524640535e-01,
		4.2271936732562421e-01, 2.9871494846480506e-01, 6.0343086813946123e-01,
		6.5050309033626463e-01, 6.2611305300575382e-01, 4.9016643252911518e-01,
		6.3228557723272305e-01, 8.0881918292978749e-03, 9.8142184023407009e-01,
		3.0011820727343141e-01, 1.0221196095348672e-01, 1.7152991176879773e-01,
		6.3234800301520455e-01, 6.4222978064709224e-01,
	}
	b := []float64{
		1.4305400424536181e+00, 1.1546425268361689e+00, 1.5528249265311795e+00,
		1.5046909633814507e+00, 1.3106321971636674e+00, 1.7723433981144341e+00,
		1.0930877721506009e+00, 1.8067166712036105e+00, 1.4064057825267366e+00,
		1.2810478325153505e+00, 1.9576080656029342e+00, 1.6020009934522998e+00,
		1.9283873223117676e+00, 1.5668820259614546e+00, 1.4354500051833838e+00,
		1.2600111255480502e+00, 1.4573886219153447e+00, 1.0769003298984701e+00,
		1.2457299327768727e+00, 1.7477107763931770e+00,
	}
	c := []float64{
		2.8548654494460557e-01, 5.8540758620217703e-01, 2.6850381977534676e-01,
		6.9258609074529653e-01, 3.1247923637358188e-01, 9.0156663656333069e-01,
		6.1005182073414899e-01, 3.7766783517906743e-01, 9.3237166831823881e-01,
		5.8777963759554253e-01, 4.6097285394375520e-01, 2.1253215171767503e-01,
		2.8937226325800802e-01, 1.2110782971154588e-01, 7.6345100838619318e-01,
		9.4948181851599811e-01, 9.2046644452877935e-01, 9.4207843361454224e-01,
		5.5613288144227369e-01, 3.2889132147476241e-01,
	}
	d := []float64{
		5.4345703792352307e-01, 2.5206603256969351e-01, 6.7212010426701829e-01,
		5.5742791550815585e-01, 1.5338438683979383e-01, 1.3141853627070477e-01,
		2.1725351445739172e-01, 3.0696424588099869e-01, 6.5854065921020499e-01,
		5.4972430745083167e-01, 6.8185426479854760e-01, 6.4746979094442436e-01,
		3.7339166209360886e-01, 5.5263882037533685e-01, 4.5130602770887251e-01,
		5.3739081485328155e-01, 3.0980792962149784e-01, 1.1107555117435641e-01,
		7.5049154682465413e-01, 3.4499665786432776e-01,
	}
	x := []float64{
		+3.8743269018574988e-01, -1.8416124759605874e-02, +3.2427337332838657e-01,
		+2.4678206444367387e-01, +7.8428909904907917e-02, -5.2310318986601989e-02,
		+2.5837172936714375e-01, -1.1942347907589732e-01, +4.4350329009194173e-01,
		+1.1988956633676386e-01, +2.7879399381445569e-01, +2.7335327852770996e-01,
		+1.2095495317582093e-01, +5.0822993667190834e-02, +5.1938776470139614e-01,
		-3.1033791506044228e-01, +4.5485802026695138e-01, -2.7594190219192083e-01,
		+6.5046602806975073e-01, -3.7949205847255349e-02,
	}

	assert.Close(ComputeTridiagonal(a, b, c, d), x, 1e-15, t)
}

func TestComputeTridiagonal2D(t *testing.T) {
	a := []float64{
		4.1702200470257400e-01, 7.2032449344215810e-01, 1.1437481734488664e-04,
		3.0233257263183977e-01, 1.4675589081711304e-01, 9.2338594768797799e-02,
		1.8626021137767090e-01, 3.4556072704304774e-01, 3.9676747423066994e-01,
		5.3881673400335695e-01,
	}
	b := []float64{
		1.4191945144032947e+00, 1.6852195003967596e+00, 1.2044522497315175e+00,
		1.8781174363909454e+00, 1.0273875931979262e+00, 1.6704675101784021e+00,
		1.4173048023671271e+00, 1.5586898284457518e+00, 1.1403869385952339e+00,
		1.1981014890848787e+00,
	}
	c := []float64{
		8.0074456867553667e-01, 9.6826157571939753e-01, 3.1342417815924284e-01,
		6.9232261566931408e-01, 8.7638915229603831e-01, 8.9460666350384732e-01,
		8.5044211369777911e-02, 3.9054783232882362e-02, 1.6983041956456890e-01,
		8.7814250342941313e-01,
	}
	d := []float64{
		9.8886108890649471e-01, 7.4816565437983940e-01, 2.8044399206440518e-01,
		7.8927932845148852e-01, 1.0322600657764203e-01, 4.4789352617590517e-01,
		9.0859550309309556e-01, 2.9361414837367950e-01, 2.8777533858634874e-01,
		1.3002857211827767e-01, 1.9366957870297075e-02, 6.7883553293989096e-01,
		2.1162811600005904e-01, 2.6554665937222621e-01, 4.9157315928033829e-01,
		5.3362545117080384e-02, 5.7411760549201307e-01, 1.4672857490581015e-01,
		5.8930553690328424e-01, 6.9975836002093117e-01,
	}
	x := []float64{
		+4.2413660994635355e-01, +3.9961178716148082e-01, -3.2589132682920774e-01,
		+5.5626432959857730e-01, -2.9143803729175111e-01, +2.6209172590772878e-01,
		+6.2141868670421718e-01, +9.3577077457946675e-02, +1.8848763199672364e-01,
		+4.6108623476807969e-02, -3.2256530997806154e-01, +4.9279026276907484e-01,
		-5.4582244963076967e-02, -1.1208513329599634e-01, +5.4320839567983115e-01,
		-3.6469011007728362e-02, +4.0642167843987542e-01, +3.7427069391596034e-02,
		+7.4728631269099247e-02, +5.5930860268891813e-01,
	}

	assert.Close(ComputeTridiagonal(a, b, c, d), x, 1e-15, t)
}

func BenchmarkComputeTridiagonal(b *testing.B) { benchmarkComputeTridiagonal(1000, 10, b) }

func benchmarkComputeTridiagonal(n, nd int, bench *testing.B) {
	A := make([]float64, 3*n)
	for i := range A {
		A[i] = rand.Float64() + 1
	}
	a := A[0*n : 1*n]
	b := A[1*n : 2*n]
	c := A[2*n : 3*n]

	d := make([]float64, nd*n)
	for i := range b {
		d[i] = rand.Float64() + 1
	}

	bench.ResetTimer()

	for i := 0; i < bench.N; i++ {
		ComputeTridiagonal(a, b, c, d)
	}
}
